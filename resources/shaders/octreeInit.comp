#version 460

layout(set = 0, binding = 0) restrict readonly buffer VertexAttributes { vec4 pos[]; };
layout(set = 0, binding = 1) restrict readonly buffer Indices { uint index[]; };
layout(set = 1, binding = 0, r32ui) coherent uniform uimage3D octreeLinkHeader[5];
layout(set = 1, binding = 2) coherent buffer FaceIndices { uvec2 linkedIndices[]; };
layout(set = 2, binding = 0, r32f) coherent uniform image2D ZBuffer[11];

layout(push_constant) uniform PushConstants 
{
    mat4 matrixVP; 
    vec3 lightDirection;
    uint mipLevelCount;
    vec4 minBoundWorld;
    vec4 maxBoundWorld;
};

layout(local_size_x = 1024) in;

void main()
{
    if(gl_GlobalInvocationID.x == 0)
        linkedIndices[0] = uvec2(0);
    barrier();
    memoryBarrier();

    if(gl_GlobalInvocationID.x >= index.length() / 3)
        return;

    const uint triangleIndex = gl_GlobalInvocationID.x;
    const mat3x4 matrixVert = mat3x4(pos[index[3 * gl_GlobalInvocationID.x + 0]],
                                     pos[index[3 * gl_GlobalInvocationID.x + 1]],
                                     pos[index[3 * gl_GlobalInvocationID.x + 2]]);
    mat3x4 matrixNDC = matrixVP * matrixVert;
    matrixNDC[0].xyz /= matrixNDC[0].w;
    matrixNDC[1].xyz /= matrixNDC[1].w;
    matrixNDC[2].xyz /= matrixNDC[2].w;

    const uvec2 resolution = imageSize(ZBuffer[0]);
    matrixNDC[0].xy = (matrixNDC[0].xy * .5f + .5f) * resolution;
    matrixNDC[1].xy = (matrixNDC[1].xy * .5f + .5f) * resolution;
    matrixNDC[2].xy = (matrixNDC[2].xy * .5f + .5f) * resolution;

    const vec3 normal = cross(matrixNDC[1].xyz - matrixNDC[0].xyz, matrixNDC[2].xyz - matrixNDC[1].xyz);
    const vec3 minBound = min(matrixNDC[0].xyz, min(matrixNDC[1].xyz, matrixNDC[2].xyz));
    const vec3 maxBound = max(matrixNDC[0].xyz, max(matrixNDC[1].xyz, matrixNDC[2].xyz));
    if(int(minBound.x) == int(maxBound.x) || int(minBound.y) == int(maxBound.y) || normal.z > .0f || 
      (maxBound.x < 0 && maxBound.y < 0) || (minBound.x >= resolution.x && minBound.y >= resolution.y)) // cull subpixel, completely outside screen and back faces
        return;

    vec4 minBoundNDC = matrixVP * minBoundWorld;
    vec4 maxBoundNDC = matrixVP * maxBoundWorld;
    minBoundNDC /= minBoundNDC.w;
    maxBoundNDC /= maxBoundNDC.w;
    minBoundNDC.xy = clamp(minBoundNDC.xy * .5f + .5f, 0, 1) * resolution;
    maxBoundNDC.xy = clamp(maxBoundNDC.xy * .5f + .5f, 0, 1) * resolution;
    minBoundNDC.z = clamp(minBoundNDC.z, 0, 1);
    maxBoundNDC.z = clamp(maxBoundNDC.z, 0, 1);
    const vec4 temp1 = minBoundNDC, temp2 = maxBoundNDC;
    minBoundNDC = min(temp1, temp2);
    maxBoundNDC = max(temp1, temp2);

    // find deepest octree level which can cover current face
    vec3 octreeExtent = (maxBoundNDC.xyz - minBoundNDC.xyz) * .25f;
    const vec3 nodeExtent = maxBound.xyz - minBound.xyz;
    uint octreeLevel = 3;
    while(octreeLevel < 8 && all(lessThanEqual(nodeExtent, octreeExtent))) 
    {
        octreeLevel++;
        octreeExtent *= .5f;
    }
    if(octreeLevel > 3)
    {
        octreeLevel--;
        octreeExtent *= 2;
    }

    // insert face into octree node
    const ivec3 gridIndex = ivec3((minBound - minBoundNDC.xyz) / octreeExtent);
    const uint mipLevel = 7 - octreeLevel;
    const uint linkIndex = atomicAdd(linkedIndices[0].x, 1U);
    linkedIndices[linkIndex].x = triangleIndex;
    const uint prev = imageAtomicExchange(octreeLinkHeader[mipLevel], gridIndex, linkIndex);
    linkedIndices[linkIndex].y = prev;
}